{"ast":null,"code":"import React, { createContext } from 'react';\nimport { createPortal } from 'react-dom';\n\nvar _createContext = createContext(),\n    Provider = _createContext.Provider,\n    Consumer = _createContext.Consumer;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar LayersManager = function (_React$Component) {\n  inherits(LayersManager, _React$Component);\n\n  function LayersManager() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, LayersManager);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = LayersManager.__proto__ || Object.getPrototypeOf(LayersManager)).call.apply(_ref, [this].concat(args))), _this), _this.root = React.createRef(), _this.host = React.createRef(), _this.state = {\n      root: _this.root.current,\n      host: _this.host.current\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(LayersManager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        root: this.root.current,\n        host: this.host.current\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Provider, {\n        value: this.state\n      }, React.createElement(\"div\", {\n        ref: this.root,\n        style: {\n          opacity: 0.9999999\n        }\n      }, this.props.children), React.createElement(\"div\", {\n        ref: this.host,\n        style: {\n          opacity: 0.9999999\n        }\n      }));\n    }\n  }]);\n  return LayersManager;\n}(React.Component);\n\nvar Layer = function Layer(props) {\n  return React.createElement(Consumer, null, function (_ref) {\n    var host = _ref.host,\n        root = _ref.root;\n    return host && root && React.createElement(LayerImpl, _extends({}, props, {\n      host: host,\n      root: root\n    }));\n  });\n};\n\nvar LayerImpl = function (_React$Component) {\n  inherits(LayerImpl, _React$Component);\n\n  function LayerImpl() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, LayerImpl);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref2 = LayerImpl.__proto__ || Object.getPrototypeOf(LayerImpl)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {\n      container: null\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(LayerImpl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _props = this.props,\n          host = _props.host,\n          index = _props.index,\n          onMount = _props.onMount,\n          root = _props.root;\n      var container = host.ownerDocument.createElement(\"div\");\n      var sibling = typeof index === \"number\" && host.children[index];\n      sibling ? host.insertBefore(container, sibling) : host.appendChild(container);\n      this.setState({\n        container: container\n      }, function () {\n        root && onMount && onMount(root);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var container = this.state.container;\n      var _props2 = this.props,\n          root = _props2.root,\n          host = _props2.host,\n          onUnmount = _props2.onUnmount;\n      root && onUnmount && onUnmount(root);\n      host && container && host.removeChild(container);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var container = this.state.container;\n      return container && createPortal(this.props.children, container);\n    }\n  }]);\n  return LayerImpl;\n}(React.Component);\n\nexport { LayersManager, Layer };","map":null,"metadata":{},"sourceType":"module"}