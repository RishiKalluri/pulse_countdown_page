{"version":3,"sources":["../../src/components/LayerMountPoint.js"],"names":["LayerMountPoint","props","context","unsubscribe","layerStore","state","subscribeToLayer","id","setState","show","hide","update","isActive","stack","getStack","layer","getLayer","index","getIndex","layerFn","args","contextTypes","object","defaultProps"],"mappings":"gnBAAA,8B;AACA,6C;;;AAGqBA,e;;;;;AAKnB,2BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AACpBD,SADoB,EACbC,OADa;AAE1B,UAAKC,WAAL,GAAmB,IAAnB;AACA,UAAKC,UAAL,GAAkBF,QAAQE,UAA1B,CAH0B;AAI3B,G;;AAEqBH,S,EAAOI,K,EAAO;AAClC,aAAO,IAAP;AACD,K;;AAEoB;AACnB,WAAKF,WAAL,GAAmB,KAAKC,UAAL,CAAgBE,gBAAhB,CAAiC,KAAKL,KAAL,CAAWM,EAA5C,EAAgD,YAAM;AACvE,eAAKC,QAAL,CAAc,EAAd;AACD,OAFkB,CAAnB;AAGD,K;;AAEsB;AACrB,WAAKL,WAAL;AACA,WAAKA,WAAL,GAAmB,IAAnB;AACA,WAAKC,UAAL,GAAkB,IAAlB;AACD,K;;AAEQ;AACCG,QADD,GACQ,KAAKN,KADb,CACCM,EADD;AAEkC,WAAKH,UAFvC,KAECK,KAFD,eAECA,IAFD,KAEOC,KAFP,eAEOA,IAFP,KAEaC,OAFb,eAEaA,MAFb,KAEqBC,QAFrB,eAEqBA,QAFrB;AAGP,UAAMC,QAAQ,KAAKT,UAAL,CAAgBU,QAAhB,EAAd;AACA,UAAMC,QAAQ,KAAKX,UAAL,CAAgBY,QAAhB,CAAyBT,EAAzB,CAAd;AACA,UAAMU,QAAQ,KAAKb,UAAL,CAAgBc,QAAhB,CAAyBX,EAAzB,CAAd;AACA,aAAOK,SAASL,EAAT,IAAeQ,MAAMI,OAAN,eAAc;AAClCF,oBADkC,EAC3BV,MAD2B,EACvBM,YADuB,EAChB;AAClBH,cAAM,wBAAMA,MAAKH,EAAL,CAAN,EAF4B,EAEZ;AACtB;AACAE,cAAM,mDAAIW,IAAJ,gDAAIA,IAAJ,iCAAaX,MAAKF,EAAL,EAASa,IAAT,CAAb,EAJ4B,EAIC;AACnCT,gBAAQ,sDAAIS,IAAJ,qDAAIA,IAAJ,mCAAaT,QAAOJ,EAAP,EAAWa,IAAX,CAAb,EAL0B,EAAd;AAMhBL,YAAMK,IANU,GAAf,GAMa,IANpB;AAOD,K,kEAxCkBpB,e;;;AA2CrBA,gBAAgBqB,YAAhB,GAA+B;AAC7BjB,cAAY,iBAAUkB,MADO,EAA/B;;;AAIAtB,gBAAgBuB,YAAhB,GAA+B;AAC7BN,SAAO,CADsB,EAA/B","file":"LayerMountPoint.js","sourcesContent":["import React, { Component, createElement, PropTypes} from 'react'\nimport LayerStore from './../LayerStore';\nimport type { MountPointProps } from './../types'\n\nexport default class LayerMountPoint extends Component {\n\n  props: MountPointProps;\n  layerStore: LayerStore;\n\n  constructor(props, context) {\n    super(props, context);\n    this.unsubscribe = null;\n    this.layerStore = context.layerStore;\n  }\n\n  shouldComponentUpdate(props, state) {\n    return true;\n  }\n\n  componentWillMount() {\n    this.unsubscribe = this.layerStore.subscribeToLayer(this.props.id, () => {\n      this.setState({})\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n    this.unsubscribe = null;\n    this.layerStore = null;\n  }\n\n  render() {\n    const { id } = this.props;\n    const { show, hide, update, isActive } = this.layerStore;\n    const stack = this.layerStore.getStack();\n    const layer = this.layerStore.getLayer(id);\n    const index = this.layerStore.getIndex(id);\n    return isActive(id) ? layer.layerFn({\n      index, id, stack, // seems like there is no valid use-case mountPointId in the Layer render function\n      hide: () => hide(id), // intention here is to hide ID's management from Layer and let app developer manage these IDs independently\n      // which will give an ability to write general-purpose Layers and share them b/w projects\n      show: (...args) => show(id, args), // sometimes you may want to change args of the current layer\n      update: (...args) => update(id, args)\n    }, ...layer.args) : null;\n  }\n}\n\nLayerMountPoint.contextTypes = {\n  layerStore: PropTypes.object\n};\n\nLayerMountPoint.defaultProps = {\n  index: 0\n};"]}